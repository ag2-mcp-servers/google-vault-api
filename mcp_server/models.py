# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:05:04+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ErrorType(Enum):
    ERROR_TYPE_UNSPECIFIED = 'ERROR_TYPE_UNSPECIFIED'
    WILDCARD_TOO_BROAD = 'WILDCARD_TOO_BROAD'
    TOO_MANY_TERMS = 'TOO_MANY_TERMS'
    LOCATION_UNAVAILABLE = 'LOCATION_UNAVAILABLE'
    UNKNOWN = 'UNKNOWN'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'


class AccountInfo(BaseModel):
    emails: Optional[List[str]] = Field(
        None, description='A set of accounts to search.'
    )


class AddHeldAccountsRequest(BaseModel):
    accountIds: Optional[List[str]] = Field(
        None,
        description='A comma-separated list of the account IDs of the accounts to add to the hold. Specify either **emails** or **account_ids**, but not both.',
    )
    emails: Optional[List[str]] = Field(
        None,
        description='A comma-separated list of the emails of the accounts to add to the hold. Specify either **emails** or **account_ids**, but not both.',
    )


class CancelOperationRequest(BaseModel):
    pass


class CloseMatterRequest(BaseModel):
    pass


class CloudStorageFile(BaseModel):
    bucketName: Optional[str] = Field(
        None,
        description='The name of the Cloud Storage bucket for the export file. You can use this value in the [Cloud Storage JSON or XML APIs](https://cloud.google.com/storage/docs/apis), but not to list the bucket contents. Instead, you can [get individual export files](https://cloud.google.com/storage/docs/json_api/v1/objects/get) by object name.',
    )
    md5Hash: Optional[str] = Field(None, description='The md5 hash of the file.')
    objectName: Optional[str] = Field(
        None,
        description='The name of the Cloud Storage object for the export file. You can use this value in the [Cloud Storage JSON or XML APIs](https://cloud.google.com/storage/docs/apis).',
    )
    size: Optional[str] = Field(None, description='The export file size.')


class CloudStorageSink(BaseModel):
    files: Optional[List[CloudStorageFile]] = Field(
        None, description='Output only. The exported files in Cloud Storage.'
    )


class View(Enum):
    COUNT_RESULT_VIEW_UNSPECIFIED = 'COUNT_RESULT_VIEW_UNSPECIFIED'
    TOTAL_COUNT = 'TOTAL_COUNT'
    ALL = 'ALL'


class DriveExportOptions(BaseModel):
    includeAccessInfo: Optional[bool] = Field(
        None,
        description='To include access level information for users with [indirect access](https://support.google.com/vault/answer/6099459#metadata) to files, set to **true**.',
    )


class ClientSideEncryptedOption(Enum):
    CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED = (
        'CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED'
    )
    CLIENT_SIDE_ENCRYPTED_OPTION_ANY = 'CLIENT_SIDE_ENCRYPTED_OPTION_ANY'
    CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED = 'CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED'
    CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED = (
        'CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED'
    )


class DriveOptions(BaseModel):
    clientSideEncryptedOption: Optional[ClientSideEncryptedOption] = Field(
        None,
        description='Set whether the results include only content encrypted with [Google Workspace Client-side encryption](https://support.google.com/a?p=cse_ov) content, only unencrypted content, or both. Defaults to both. Currently supported for Drive.',
    )
    includeSharedDrives: Optional[bool] = Field(
        None, description='Set to **true** to include shared drives.'
    )
    includeTeamDrives: Optional[bool] = Field(
        None, description='Set to true to include Team Drive.'
    )
    versionDate: Optional[str] = Field(
        None,
        description='Search the current version of the Drive file, but export the contents of the last version saved before 12:00 AM UTC on the specified date. Enter the date in UTC.',
    )


class Empty(BaseModel):
    pass


class Status1(Enum):
    EXPORT_STATUS_UNSPECIFIED = 'EXPORT_STATUS_UNSPECIFIED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'


class Region(Enum):
    EXPORT_REGION_UNSPECIFIED = 'EXPORT_REGION_UNSPECIFIED'
    ANY = 'ANY'
    US = 'US'
    EUROPE = 'EUROPE'


class ExportStats(BaseModel):
    exportedArtifactCount: Optional[str] = Field(
        None,
        description='The number of messages or files already processed for export.',
    )
    sizeInBytes: Optional[str] = Field(None, description='The size of export in bytes.')
    totalArtifactCount: Optional[str] = Field(
        None, description='The number of messages or files to be exported.'
    )


class ExportFormat(Enum):
    EXPORT_FORMAT_UNSPECIFIED = 'EXPORT_FORMAT_UNSPECIFIED'
    MBOX = 'MBOX'
    PST = 'PST'


class GroupsExportOptions(BaseModel):
    exportFormat: Optional[ExportFormat] = Field(
        None, description='The file format for exported messages.'
    )


class HangoutsChatExportOptions(BaseModel):
    exportFormat: Optional[ExportFormat] = Field(
        None, description='The file format for exported messages.'
    )


class HangoutsChatInfo(BaseModel):
    roomId: Optional[List[str]] = Field(
        None,
        description='A list of Chat spaces IDs, as provided by the [Chat API](https://developers.google.com/chat). There is a limit of exporting from 500 Chat spaces per request.',
    )


class HangoutsChatOptions(BaseModel):
    includeRooms: Optional[bool] = Field(
        None,
        description='For searches by account or organizational unit, set to **true** to include rooms.',
    )


class HeldAccount(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='The account ID, as provided by the [Admin SDK](https://developers.google.com/admin-sdk/).',
    )
    email: Optional[str] = Field(
        None,
        description='The primary email address of the account. If used as an input, this takes precedence over **accountId**.',
    )
    firstName: Optional[str] = Field(
        None, description='Output only. The first name of the account holder.'
    )
    holdTime: Optional[str] = Field(
        None, description='Output only. When the account was put on hold.'
    )
    lastName: Optional[str] = Field(
        None, description='Output only. The last name of the account holder.'
    )


class HeldDriveQuery(BaseModel):
    includeSharedDriveFiles: Optional[bool] = Field(
        None,
        description='To include files in shared drives in the hold, set to **true**.',
    )
    includeTeamDriveFiles: Optional[bool] = Field(
        None,
        description='To include files in Team Drives in the hold, set to **true**.',
    )


class HeldGroupsQuery(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='The end time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date.',
    )
    startTime: Optional[str] = Field(
        None,
        description='The start time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date.',
    )
    terms: Optional[str] = Field(
        None,
        description='The [search operators](https://support.google.com/vault/answer/2474474) used to refine the messages covered by the hold.',
    )


class HeldHangoutsChatQuery(BaseModel):
    includeRooms: Optional[bool] = Field(
        None,
        description='To include messages in Chat spaces the user was a member of, set to **true**.',
    )


class HeldMailQuery(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='The end time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date.',
    )
    startTime: Optional[str] = Field(
        None,
        description='The start time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date.',
    )
    terms: Optional[str] = Field(
        None,
        description='The [search operators](https://support.google.com/vault/answer/2474474) used to refine the messages covered by the hold.',
    )


class HeldOrgUnit(BaseModel):
    holdTime: Optional[str] = Field(
        None,
        description='When the organizational unit was put on hold. This property is immutable.',
    )
    orgUnitId: Optional[str] = Field(
        None,
        description="The organizational unit's immutable ID as provided by the [Admin SDK](https://developers.google.com/admin-sdk/).",
    )


class CoveredDatum(Enum):
    COVERED_DATA_UNSPECIFIED = 'COVERED_DATA_UNSPECIFIED'
    TEXT_MESSAGES = 'TEXT_MESSAGES'
    VOICEMAILS = 'VOICEMAILS'
    CALL_LOGS = 'CALL_LOGS'


class HeldVoiceQuery(BaseModel):
    coveredData: Optional[List[CoveredDatum]] = Field(
        None,
        description='A list of data types covered by the hold. Should be non-empty. Order does not matter and duplicates are ignored.',
    )


class Corpus(Enum):
    CORPUS_TYPE_UNSPECIFIED = 'CORPUS_TYPE_UNSPECIFIED'
    DRIVE = 'DRIVE'
    MAIL = 'MAIL'
    GROUPS = 'GROUPS'
    HANGOUTS_CHAT = 'HANGOUTS_CHAT'
    VOICE = 'VOICE'


class ListHeldAccountsResponse(BaseModel):
    accounts: Optional[List[HeldAccount]] = Field(
        None, description='The held accounts on a hold.'
    )


class MailExportOptions(BaseModel):
    exportFormat: Optional[ExportFormat] = Field(
        None, description='The file format for exported messages.'
    )
    showConfidentialModeContent: Optional[bool] = Field(
        None, description='To export confidential mode content, set to **true**.'
    )
    useNewExport: Optional[bool] = Field(
        None, description='To use the new export system, set to **true**.'
    )


class MailOptions(BaseModel):
    clientSideEncryptedOption: Optional[ClientSideEncryptedOption] = Field(
        None,
        description='Specifies whether the results should include encrypted content, unencrypted content, or both. Defaults to including both.',
    )
    excludeDrafts: Optional[bool] = Field(
        None, description='Set to **true** to exclude drafts.'
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    DELETED = 'DELETED'


class Role(Enum):
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    COLLABORATOR = 'COLLABORATOR'
    OWNER = 'OWNER'


class MatterPermission(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='The account ID, as provided by the [Admin SDK](https://developers.google.com/admin-sdk/).',
    )
    role: Optional[Role] = Field(None, description="The user's role for the matter.")


class OrgUnitInfo(BaseModel):
    orgUnitId: Optional[str] = Field(
        None,
        description='The name of the organizational unit to search, as provided by the [Admin SDK Directory API](https://developers.google.com/admin-sdk/directory/).',
    )


class DataScope(Enum):
    DATA_SCOPE_UNSPECIFIED = 'DATA_SCOPE_UNSPECIFIED'
    ALL_DATA = 'ALL_DATA'
    HELD_DATA = 'HELD_DATA'
    UNPROCESSED_DATA = 'UNPROCESSED_DATA'


class Method(Enum):
    SEARCH_METHOD_UNSPECIFIED = 'SEARCH_METHOD_UNSPECIFIED'
    ACCOUNT = 'ACCOUNT'
    ORG_UNIT = 'ORG_UNIT'
    TEAM_DRIVE = 'TEAM_DRIVE'
    ENTIRE_ORG = 'ENTIRE_ORG'
    ROOM = 'ROOM'
    SITES_URL = 'SITES_URL'
    SHARED_DRIVE = 'SHARED_DRIVE'


class SearchMethod(Enum):
    SEARCH_METHOD_UNSPECIFIED = 'SEARCH_METHOD_UNSPECIFIED'
    ACCOUNT = 'ACCOUNT'
    ORG_UNIT = 'ORG_UNIT'
    TEAM_DRIVE = 'TEAM_DRIVE'
    ENTIRE_ORG = 'ENTIRE_ORG'
    ROOM = 'ROOM'
    SITES_URL = 'SITES_URL'
    SHARED_DRIVE = 'SHARED_DRIVE'


class RemoveHeldAccountsRequest(BaseModel):
    accountIds: Optional[List[str]] = Field(
        None, description='The account IDs of the accounts to remove from the hold.'
    )


class RemoveMatterPermissionsRequest(BaseModel):
    accountId: Optional[str] = Field(None, description='The account ID.')


class ReopenMatterRequest(BaseModel):
    pass


class SharedDriveInfo(BaseModel):
    sharedDriveIds: Optional[List[str]] = Field(
        None,
        description='A list of shared drive IDs, as provided by the [Drive API](https://developers.google.com/drive).',
    )


class SitesUrlInfo(BaseModel):
    urls: Optional[List[str]] = Field(
        None, description='A list of published site URLs.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TeamDriveInfo(BaseModel):
    teamDriveIds: Optional[List[str]] = Field(
        None,
        description='List of Team Drive IDs, as provided by the [Drive API](https://developers.google.com/drive).',
    )


class UndeleteMatterRequest(BaseModel):
    pass


class UserInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The displayed name of the user.'
    )
    email: Optional[str] = Field(None, description='The email address of the user.')


class VoiceExportOptions(BaseModel):
    exportFormat: Optional[ExportFormat] = Field(
        None, description='The file format for exported text messages.'
    )


class VoiceOptions(BaseModel):
    coveredData: Optional[List[CoveredDatum]] = Field(
        None, description='Datatypes to search'
    )


class View1(Enum):
    VIEW_UNSPECIFIED = 'VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View5(Enum):
    HOLD_VIEW_UNSPECIFIED = 'HOLD_VIEW_UNSPECIFIED'
    BASIC_HOLD = 'BASIC_HOLD'
    FULL_HOLD = 'FULL_HOLD'


class AccountCount(BaseModel):
    account: Optional[UserInfo] = Field(None, description='Account owner.')
    count: Optional[str] = Field(
        None,
        description='The number of results (messages or files) found for this account.',
    )


class AccountCountError(BaseModel):
    account: Optional[UserInfo] = Field(None, description='Account owner.')
    errorType: Optional[ErrorType] = Field(None, description='Account query error.')


class AddHeldAccountResult(BaseModel):
    account: Optional[HeldAccount] = Field(
        None, description='Returned when the account was successfully created.'
    )
    status: Optional[Status] = Field(
        None,
        description='Reports the request status. If it failed, returns an error message.',
    )


class AddHeldAccountsResponse(BaseModel):
    responses: Optional[List[AddHeldAccountResult]] = Field(
        None,
        description='The list of responses, in the same order as the batch request.',
    )


class AddMatterPermissionsRequest(BaseModel):
    ccMe: Optional[bool] = Field(
        None,
        description='Only relevant if **sendEmails** is **true**. To CC the requestor in the email message, set to **true**. To not CC requestor, set to **false**.',
    )
    matterPermission: Optional[MatterPermission] = Field(
        None, description='The account and its role to add.'
    )
    sendEmails: Optional[bool] = Field(
        None,
        description='To send a notification email to the added account, set to **true**. To not send a notification email, set to **false**.',
    )


class CorpusQuery(BaseModel):
    driveQuery: Optional[HeldDriveQuery] = Field(
        None,
        description='Service-specific options for Drive holds. If set, **CorpusType** must be **DRIVE**.',
    )
    groupsQuery: Optional[HeldGroupsQuery] = Field(
        None,
        description='Service-specific options for Groups holds. If set, **CorpusType** must be **GROUPS**.',
    )
    hangoutsChatQuery: Optional[HeldHangoutsChatQuery] = Field(
        None,
        description='Service-specific options for Chat holds. If set, **CorpusType** must be **HANGOUTS_CHAT**.',
    )
    mailQuery: Optional[HeldMailQuery] = Field(
        None,
        description='Service-specific options for Gmail holds. If set, **CorpusType** must be **MAIL**.',
    )
    voiceQuery: Optional[HeldVoiceQuery] = Field(
        None,
        description='Service-specific options for Voice holds. If set, **CorpusType** must be **VOICE**.',
    )


class ExportOptions(BaseModel):
    driveOptions: Optional[DriveExportOptions] = Field(
        None, description='Options for Drive exports.'
    )
    groupsOptions: Optional[GroupsExportOptions] = Field(
        None, description='Options for Groups exports.'
    )
    hangoutsChatOptions: Optional[HangoutsChatExportOptions] = Field(
        None, description='Options for Chat exports.'
    )
    mailOptions: Optional[MailExportOptions] = Field(
        None, description='Options for Gmail exports.'
    )
    region: Optional[Region] = Field(
        None, description='The requested data region for the export.'
    )
    voiceOptions: Optional[VoiceExportOptions] = Field(
        None, description='Options for Voice exports.'
    )


class GroupsCountResult(BaseModel):
    accountCountErrors: Optional[List[AccountCountError]] = Field(
        None, description='Error occurred when querying these accounts.'
    )
    accountCounts: Optional[List[AccountCount]] = Field(
        None,
        description='Subtotal count per matching account that have more than zero messages.',
    )
    matchingAccountsCount: Optional[str] = Field(
        None,
        description='Total number of accounts that can be queried and have more than zero messages.',
    )
    nonQueryableAccounts: Optional[List[str]] = Field(
        None,
        description='When **DataScope** is **HELD_DATA**, these accounts in the request are not queried because they are not on hold. For other data scope, this field is not set.',
    )
    queriedAccountsCount: Optional[str] = Field(
        None, description='Total number of accounts involved in this count operation.'
    )


class Hold(BaseModel):
    accounts: Optional[List[HeldAccount]] = Field(
        None,
        description='If set, the hold applies to the specified accounts and **orgUnit** must be empty.',
    )
    corpus: Optional[Corpus] = Field(None, description='The service to be searched.')
    holdId: Optional[str] = Field(
        None,
        description='The unique immutable ID of the hold. Assigned during creation.',
    )
    name: Optional[str] = Field(None, description='The name of the hold.')
    orgUnit: Optional[HeldOrgUnit] = Field(
        None,
        description='If set, the hold applies to all members of the organizational unit and **accounts** must be empty. This property is mutable. For Groups holds, set **accounts**.',
    )
    query: Optional[CorpusQuery] = Field(
        None,
        description='Service-specific options. If set, **CorpusQuery** must match **CorpusType**.',
    )
    updateTime: Optional[str] = Field(
        None, description='The last time this hold was modified.'
    )


class ListHoldsResponse(BaseModel):
    holds: Optional[List[Hold]] = Field(None, description='The list of holds.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token to retrieve the next page of results in the list. If this is empty, then there are no more holds to list.',
    )


class MailCountResult(BaseModel):
    accountCountErrors: Optional[List[AccountCountError]] = Field(
        None, description='Errors occurred when querying these accounts.'
    )
    accountCounts: Optional[List[AccountCount]] = Field(
        None,
        description='Subtotal count per matching account that have more than zero messages.',
    )
    matchingAccountsCount: Optional[str] = Field(
        None,
        description='Total number of accounts that can be queried and have more than zero messages.',
    )
    nonQueryableAccounts: Optional[List[str]] = Field(
        None,
        description='When **DataScope** is **HELD_DATA** and when account emails are passed in explicitly, the list of accounts in the request that are not queried because they are not on hold in the matter. For other data scopes, this field is not set.',
    )
    queriedAccountsCount: Optional[str] = Field(
        None, description='Total number of accounts involved in this count operation.'
    )


class Matter(BaseModel):
    description: Optional[str] = Field(
        None, description='An optional description for the matter.'
    )
    matterId: Optional[str] = Field(
        None,
        description='The matter ID, which is generated by the server. Leave blank when creating a matter.',
    )
    matterPermissions: Optional[List[MatterPermission]] = Field(
        None,
        description='Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have.',
    )
    name: Optional[str] = Field(None, description='The name of the matter.')
    state: Optional[State] = Field(None, description='The state of the matter.')


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Query(BaseModel):
    accountInfo: Optional[AccountInfo] = Field(
        None, description='Required when **SearchMethod** is **ACCOUNT**.'
    )
    corpus: Optional[Corpus] = Field(
        None, description='The Google Workspace service to search.'
    )
    dataScope: Optional[DataScope] = Field(
        None, description='The data source to search.'
    )
    driveOptions: Optional[DriveOptions] = Field(
        None, description='Set Drive search-specific options.'
    )
    endTime: Optional[str] = Field(
        None,
        description='The end time for the search query. Specify in GMT. The value is rounded to 12 AM on the specified date.',
    )
    hangoutsChatInfo: Optional[HangoutsChatInfo] = Field(
        None, description='Required when **SearchMethod** is **ROOM**. (read-only)'
    )
    hangoutsChatOptions: Optional[HangoutsChatOptions] = Field(
        None, description='Set Chat search-specific options. (read-only)'
    )
    mailOptions: Optional[MailOptions] = Field(
        None, description='Set Gmail search-specific options.'
    )
    method: Optional[Method] = Field(
        None,
        description='The entity to search. This field replaces **searchMethod** to support shared drives. When **searchMethod** is **TEAM_DRIVE**, the response of this field is **SHARED_DRIVE**.',
    )
    orgUnitInfo: Optional[OrgUnitInfo] = Field(
        None, description='Required when **SearchMethod** is **ORG_UNIT**.'
    )
    searchMethod: Optional[SearchMethod] = Field(
        None, description='The search method to use.'
    )
    sharedDriveInfo: Optional[SharedDriveInfo] = Field(
        None, description='Required when **SearchMethod** is **SHARED_DRIVE**.'
    )
    sitesUrlInfo: Optional[SitesUrlInfo] = Field(
        None, description='Required when **SearchMethod** is **SITES_URL**.'
    )
    startTime: Optional[str] = Field(
        None,
        description='The start time for the search query. Specify in GMT. The value is rounded to 12 AM on the specified date.',
    )
    teamDriveInfo: Optional[TeamDriveInfo] = Field(
        None, description='Required when **SearchMethod** is **TEAM_DRIVE**.'
    )
    terms: Optional[str] = Field(
        None,
        description='Service-specific [search operators](https://support.google.com/vault/answer/2474474) to filter search results.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The time zone name. It should be an IANA TZ name, such as "America/Los_Angeles". For a list of time zone names, see [Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For more information about how Vault uses time zones, see [the Vault help center](https://support.google.com/vault/answer/6092995#time).',
    )
    voiceOptions: Optional[VoiceOptions] = Field(
        None, description='Set Voice search-specific options.'
    )


class RemoveHeldAccountsResponse(BaseModel):
    statuses: Optional[List[Status]] = Field(
        None,
        description='A list of statuses for the deleted accounts. Results have the same order as the request.',
    )


class ReopenMatterResponse(BaseModel):
    matter: Optional[Matter] = Field(
        None, description='The updated matter, with state **OPEN**.'
    )


class SavedQuery(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. The server-generated timestamp when the saved query was created.',
    )
    displayName: Optional[str] = Field(None, description='The name of the saved query.')
    matterId: Optional[str] = Field(
        None,
        description='Output only. The matter ID of the matter the saved query is saved in. The server does not use this field during create and always uses matter ID in the URL.',
    )
    query: Optional[Query] = Field(
        None, description='The search parameters of the saved query.'
    )
    savedQueryId: Optional[str] = Field(
        None, description='A unique identifier for the saved query.'
    )


class CloseMatterResponse(BaseModel):
    matter: Optional[Matter] = Field(
        None, description='The updated matter, with state **CLOSED**.'
    )


class CountArtifactsMetadata(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='End time of count operation. Available when operation is done.',
    )
    matterId: Optional[str] = Field(
        None, description='The matter ID of the associated matter.'
    )
    query: Optional[Query] = Field(
        None, description='The search query from the request.'
    )
    startTime: Optional[str] = Field(
        None, description='Creation time of count operation.'
    )


class CountArtifactsRequest(BaseModel):
    query: Optional[Query] = Field(None, description='The search query.')
    view: Optional[View] = Field(
        None, description='Sets the granularity of the count results.'
    )


class CountArtifactsResponse(BaseModel):
    groupsCountResult: Optional[GroupsCountResult] = Field(
        None, description='Count metrics for Groups.'
    )
    mailCountResult: Optional[MailCountResult] = Field(
        None, description='Count metrics for Gmail and classic Hangouts.'
    )
    totalCount: Optional[str] = Field(None, description='Total count of messages.')


class Export(BaseModel):
    cloudStorageSink: Optional[CloudStorageSink] = Field(
        None, description='Output only. The sink for export files in Cloud Storage.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the export was created.'
    )
    exportOptions: Optional[ExportOptions] = Field(
        None, description='Additional export options.'
    )
    id: Optional[str] = Field(None, description='Output only. The generated export ID.')
    matterId: Optional[str] = Field(None, description='Output only. The matter ID.')
    name: Optional[str] = Field(
        None,
        description="The export name. Don't use special characters (~!$'(),;@:/?) in the name, they can prevent you from downloading exports.",
    )
    query: Optional[Query] = Field(
        None, description='The query parameters used to create the export.'
    )
    requester: Optional[UserInfo] = Field(
        None, description='Output only. The requester of the export.'
    )
    stats: Optional[ExportStats] = Field(
        None, description='Output only. Details about the export progress and size.'
    )
    status: Optional[Status1] = Field(
        None, description='Output only. The status of the export.'
    )


class ListExportsResponse(BaseModel):
    exports: Optional[List[Export]] = Field(None, description='The list of exports.')
    nextPageToken: Optional[str] = Field(
        None, description='Page token to retrieve the next page of results in the list.'
    )


class ListMattersResponse(BaseModel):
    matters: Optional[List[Matter]] = Field(None, description='List of matters.')
    nextPageToken: Optional[str] = Field(
        None, description='Page token to retrieve the next page of results in the list.'
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListSavedQueriesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token to retrieve the next page of results in the list. If this is empty, then there are no more saved queries to list.',
    )
    savedQueries: Optional[List[SavedQuery]] = Field(
        None, description='List of saved queries.'
    )
